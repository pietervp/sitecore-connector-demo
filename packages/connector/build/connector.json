{
  "id": "sitecore-demo",
  "name": "Sitecore Demo",
  "type": "media",
  "version": "1.0.0",
  "supportedAuth": [
    "staticKey"
  ],
  "options": {
    "SITECORE_API_BASE": "https://replace.com/api"
  },
  "script": "class ContentHubConnector {\n    constructor(runtime) {\n        this.runtime = runtime;\n    }\n    async query(options, context) {\n        this.log(\"query\", { options, context });\n        // return dummy collection\n        return Promise.resolve({\n            data: [\n                {\n                    id: \"./dummy.webp\",\n                    name: \"test\",\n                    type: 0,\n                    preview: {\n                        url: \"./dummy.webp\",\n                        width: 272,\n                        height: 92\n                    },\n                    relativePath: \"/test\",\n                    metaData: {\n                        \"api\": this.runtime.options[\"SITECORE_API_BASE\"] ?? \"not set\",\n                        \"test\": \"random value\"\n                    }\n                }\n            ],\n            pageSize: 1,\n            links: {\n                nextPage: \"\"\n            }\n        });\n    }\n    async detail(id, context) {\n        this.log(\"detail\", id);\n        return Promise.resolve({\n            id: id,\n            name: \"test\",\n            type: 0,\n            preview: {\n                url: \"./dummy.webp\",\n                width: 272,\n                height: 92\n            },\n            extension: \"png\",\n            width: 272,\n            height: 92,\n            relativePath: \"/test\",\n            metaData: {\n                \"api\": this.runtime.options[\"SITECORE_API_BASE\"] ?? \"not set\",\n                \"test\": \"random value\"\n            }\n        });\n    }\n    async download(id, previewType, context) {\n        this.log(\"download\", { id, previewType, context });\n        return (await this.runtime.fetch(id, {\n            method: \"GET\"\n        })).arrayBuffer;\n    }\n    upload(name, blob, context) {\n        throw new Error(\"Method not implemented.\");\n    }\n    remove(id, context) {\n        throw new Error(\"Method not implemented.\");\n    }\n    copy(id, newName, context) {\n        throw new Error(\"Method not implemented.\");\n    }\n    getConfigurationOptions() {\n        this.log(\"getConfigurationOptions\", {});\n        return [\n            //@ts-ignore\n            { name: \"test\", type: 'text', displayName: \"test\" }\n        ];\n    }\n    getCapabilities() {\n        this.log(\"getCapabilities\", {});\n        return {\n            copy: false,\n            upload: false,\n            remove: false,\n            query: true,\n            detail: true,\n            filtering: true,\n        };\n    }\n    // generic method log, taking a name, and a data object\n    log(name, data) {\n        // print a formatted string to the console, JSON.stringify converts the data object to a string\n        this.runtime.logError(`[${name}] ${JSON.stringify(data)}`);\n    }\n}\n"
}